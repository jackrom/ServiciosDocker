version: '3.8'

services:
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./path/to/certs:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - webnet
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 10
        window: 15s
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=webnet"
        - "traefik.http.services.myrouter-01.loadbalancer.server.port=80"
        ### Middlewares
        # https-redir
        - "traefik.http.middlewares.https-redir.redirectscheme.scheme=https"
        - "traefik.http.middlewares.https-redir.redirectscheme.permanent=true"
        # www-redir
        - "traefik.http.middlewares.www-redir.redirectregex.regex=^https://www.(.*)"
        - "traefik.http.middlewares.www-redir.redirectregex.replacement=https://$${1}"
        - "traefik.http.middlewares.www-redir.redirectregex.permanent=true"
        ### Entrypoints
        # web
        - "traefik.http.routers.myrouter-01.rule=Host(`example.com`, `www.example.com`)"
        - "traefik.http.routers.myrouter-01.entrypoints=web"
        - "traefik.http.routers.myrouter-01.middlewares=https-redir@docker"
        # websecure
        - "traefik.http.routers.myrouter-02.rule=Host(`example.com`, `www.example.com`)"
        - "traefik.http.routers.myrouter-02.entrypoints=websecure"
        - "traefik.http.routers.myrouter-02.middlewares=www-redir@docker"
        - "traefik.http.routers.myrouter-02.tls=true"
        - "traefik.http.routers.myrouter-02.tls.certresolver=myCloudflare"
        - "traefik.http.routers.myrouter-02.tls.domains[0].main=example.com"
        - "traefik.http.routers.myrouter-02.tls.domains[0].sans=*.example.com"

  # wordpress
  wordpress:
    image: wordpress:latest
    volumes:
      - wp_data:/var/www/html
      - ./wp_uploads:/var/www/html/wp-content/uploads
      - ./apps/wordpress/php.ini:/usr/local/etc/php/php.ini  #revisar
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_USER: wordpress
      MYSQL_PASSWORD: wordpress
      WORDPRESS_DB_PASSWORD: wordpress
      WORDPRESS_DB_NAME: wordpress
      WORDPRESS_TABLE_PREFIX: wp_
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
    networks:
      - webnet
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 10
        window: 15s
      labels:
        - "traefik.enable=false"

  # phpmyadmin
  phpmyadmin:
    image: phpmyadmin
    restart: always
    environment:
      - PMA_HOST=db
      - PMA_USER=wordpress
      - PMA_PASSWORD=wordpress
    networks:
      - webnet
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # sonarqube
  sonarqube:
    image: sonarqube:latest
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins
    environment:
      SONARQUBE_JDBC_URL: jdbc:postgresql://postgresql/sonar
      SONARQUBE_JDBC_USERNAME: sonar
      SONARQUBE_JDBC_PASSWORD: sonar
    networks:
      - webnet
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # rabbitMQ
  rabbitmq:
    image: rabbitmq:management
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    networks:
      - webnet
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # postgresql
  postgresql:
    image: postgres:latest
    shm_size: 128mb
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    hostname: postgresql
    container_name: postgresql
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - postgresql:/var/lib/postgresql
    environment:
      POSTGRES_DB: sonar
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_INITDB_ARGS: "--data-checksums"
    networks:
      - webnet
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # mysql
  db:
    image: mariadb:10.6.4-focal
    command: '--default-authentication-plugin=mysql_native_password'
    volumes:
      - db_data:/var/lib/mysql:rw
      - configuration/conf.d/mysql.cnf:/etc/mysql/conf.d/my.cnf:rw
    restart: always
    healthcheck:
      test: '/usr/bin/mysql --user=healthcheck --password=healthcheck --execute "SHOW DATABASES;"'
      interval: 1m
      retries: 1
      timeout: 10s
    environment:
      - MYSQL_ROOT_PASSWORD=somewordpress
      - MYSQL_DATABASE=wordpress
      - MYSQL_USER=wordpress
      - MYSQL_PASSWORD=wordpress
    ports:
      - '3306:3306'
    expose:
      - 3306
      - 33060
    networks:
      - webnet
    network_mode: bridge
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 10
        window: 15s
      labels:
        - "traefik.enable=false"

  # gitlab
  gitlab:
    image: gitlab/gitlab-ce:latest
    container_name: gitlab
    restart: always
    hostname: 'gitlab.local'
    environment:
      GITLAB_HOME: /srv/gitlab
      GITLAB_OMNIBUS_CONFIG: "from_file('/omnibus_config.rb')"
    configs:
      - source: gitlab
        target: /gitlab.rb
    volumes:
      - gitlab_config:/etc/gitlab
      - gitlab_logs:/var/log/gitlab
      - gitlab_data:/var/opt/gitlab
    ports:
      - '8929:80'
      - '2289:22'
      - '443:443'
    networks:
      - webnet
    secrets:
      - gitlab_root_password

  gitlab-runner:
    image: gitlab/gitlab-runner:alpine
    deploy:
      mode: replicated
      replicas: 4
    networks:
      - webnet


  # redmine
  redmine:
    image: redmine
    volumes:
      - redmine_data:/usr/src/redmine/files
    environment:
      - REDMINE_DB_POSTGRES=postgresql
      - REDMINE_DB_DATABASE=redmine
      - REDMINE_DB_USERNAME=sonar
      - REDMINE_DB_PASSWORD=sonar
    networks:
      - webnet
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # jenkins
  jenkins:
    image: jenkins/jenkins:lts
    environment:
      - JENKINS_OPTS=--prefix=/jenkins
      - JAVA_OPTS=-Duser.timezone=Asia/Shanghai
    volumes:
      - /srv/docker/jenkins/jenkins:/var/jenkins_home
    networks:
      - webnet
    ports:
      - "8080:8080"
      - "50000:50000"
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s


  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@example.com
      - PGADMIN_DEFAULT_PASSWORD=SuperSecret
    ports:
      - "5050:80"
    depends_on:
      - postgresql
    networks:
      - webnet
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 10
        window: 15s
      labels:
        - "traefik.enable=false"

  traefik:
    image: traefik:2.2
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 5s
        order: stop-first
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 10
        window: 15s
        # ### Traefik Gui. Uncomment to get access on traefik.example.com.
        # labels:
        # - "traefik.enable=true"
        # - "traefik.http.services.traefik-gui.loadbalancer.server.port=8080"
        # - "traefik.http.routers.traefik-gui.rule=Host(`traefik.example.com`)"
        # - "traefik.http.routers.traefik-gui.entrypoints=websecure"
        # - "traefik.http.routers.traefik-gui.service=api@internal"
        # - "traefik.http.routers.traefik-gui.middlewares=traefik-gui-auth"
        # - "traefik.http.middlewares.traefik-gui-auth.basicauth.realm=MyPrivateRealm"
        # - "traefik.http.middlewares.traefik-gui-auth.basicauth.users=admin:$$apr1$$QsWBfEvl$$kY0SCysYUjo4qQSnKGh8s." # user:admin, pass:admin
      placement:
        constraints:
          - node.role == manager
    command:
      - "--log=true"
      - "--log.level=warn" # PANIC, FATAL, ERROR, WARN, INFO, DEBUG
      # - "--accesslog=true"
      - "--api.insecure=true"
      # - "--api.debug=true"
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      ## Certificate Resolver: cloudflare, type=dnsChallenge
      - "--certificatesResolvers.myCloudflare.acme.email=postmaster@example.com"
      - "--certificatesResolvers.myCloudflare.acme.storage=/data/acme.json"
      - "--certificatesResolvers.myCloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory" # Staging. Comment this for Production.
      - "--certificatesResolvers.myCloudflare.acme.dnsChallenge=true"
      - "--certificatesResolvers.myCloudflare.acme.dnsChallenge.provider=cloudflare"
      - "--certificatesResolvers.myCloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
    environment:
      CF_DNS_API_TOKEN: cloudflare_api_token
    ports:
      - published: 80
        target: 80
        protocol: tcp
        mode: host
      - published: 443
        target: 443
        protocol: tcp
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt_data:/data
    networks:
      - webnet

  # prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - prometheus:/var/lib/prometheus
      - prometheus:/etc/prometheus
      - prom_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring

  # cadvisor
  cadvisor:
    image: google/cadvisor
    container_name: cadvisor
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - webnet

  # node-exporter
  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    ports:
      - 9100:9100
    depends_on:
      - prometheus
    networks:
        - webnet

  # grafana
  grafana:
    image: grafana/grafana
    user: "1000"
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_PATHS_DATA=/var/lib/grafana
      - GF_PATHS_LOGS=/var/log/grafana
      - GF_PATHS_PLUGINS=/var/lib/grafana/plugins
      - GF_INSTALL_PLUGINS=http://plugin-domain.com/my-custom-plugin.zip;custom-plugin,grafanaclock-panel;clock-panel
    volumes:
      - grafana_data:/etc/grafana/provisioning/datasources
      - grafana_data:/var/lib/grafana
      - grafana_provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - webnet
      - monitoring

  # fluentd web
  fluentd-web:
    image: httpd
    ports:
      - "80:80"
    links:
      - fluentd
    depends_on:
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: httpd.access


  # fluentd
  fluentd:
    build: ./fluentd
    volumes:
      - ./fluentd/conf:/fluentd/etc
    links:
      - "elasticsearch"
    ports:
      - "24224:24224"
      # - "24224:24224/udp"


  # elasticsearch
  # https://localhost:9200
  elasticsearch:
    image: elasticsearch:8.13.0
    container_name: elastisearch
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      ELASTIC_USERNAME: elastic
      ELASTIC_PASSWORD: elastic
    ports:
      - "9200:9200"
      - "9300:9300"
    expose:
      - "9200:9200"
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - webnet

  # logstash
  logstash:
    image: logstash:7.16.1
    container_name: log
    environment:
      discovery.seed_hosts: logstash
      LS_JAVA_OPTS: "-Xms512m -Xmx512m"
    volumes:
      - ./logstash/pipeline/logstash-nginx.config:/usr/share/logstash/pipeline/logstash-nginx.config
      - ./logstash/nginx.log:/home/nginx.log
    ports:
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "5044:5044"
      - "9600:9600"
    depends_on:
      - elasticsearch
    networks:
      - webnet
    command: logstash -f /usr/share/logstash/pipeline/logstash-nginx.config

  # kibana
  # get enrollment token
  # curl -XPOST -u elastic:changeme 'http://localhost:9200/_security/api_key'
  # docker compose exec elastisearch bin/elastisearch-create-enrollment-token --scope kibana
  # get verification code
  # docker compose exec kibana bin/kibana-verification-code
  #http://localhost:5601
  kibana:
    image: kibana:8.13.0
    container_name: kibana
    links:
      - "elasticsearch"
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - webnet

  # redpanda
  redpanda:
    image: docker.redpanda.com/vectorized/redpanda:v22.2.2
    command:
      - redpanda start
      - --smp 1
      - --overprovisioned
      - --node-id 0
      - --kafka-addr PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr PLAINTEXT://redpanda:29092,OUTSIDE://redpanda:9092
      - --pandaproxy-addr 0.0.0.0:8082
      - --advertise-pandaproxy-addr localhost:8082
    ports:
      - '8081:8081'
      - '8082:8082'
      - '9092:9092'
      - '9644:9644'
      - '29092:29092'
    volumes:
      - kafka:/app

  etl:
    image: etl-kafka
    platform: wasi/wasm
    build:
      context: etl
    environment:
      DATABASE_URL: mysql://root:whalehello@db:3306/mysql
      KAFKA_URL: kafka://redpanda:9092/order
      RUST_BACKTRACE: full
      RUST_LOG: info
    restart: unless-stopped
    runtime: io.containerd.wasmedge.v1

  # atlassian-bitbucket
  atlassian-bitbucket:
    container_name: Bitbucket
    environment:
      - JDBC_PASSWORD={password}
      - JDBC_URL=jdbc:mysql://localhost:3306/bitbucketdb?useUnicode=true&characterEncoding=UTF8&sessionVariables=default_storage_engine=InnoDB&autoReconnect=true&useSSL=false
      - JDBC_USER=atlassian
      - SERVER_PROXY_NAME=/bitbucket
      - SERVER_PROXY_PORT=443
      - SERVER_SCHEME=https
      - SERVER_SECURE=true
    depends_on:
      - db
    healthcheck:
      test: 'curl localhost:7990/status | grep -q RUNNING'
      interval: 1m
      retries: 10
      timeout: 10s
    image: 'atlassian/bitbucket:latest'
    network_mode: bridge
    ports:
      - '7990:7990'
      - '7999:7999'
    restart: unless-stopped
    volumes:
      - bitbucket:/var/atlassian/application-data/bitbucket:rw
      - /configuration/mysql-connector-java-5.1.48-bin.jar:/var/atlassian/application-data/bitbucket/lib/mysql-connector-java-5.1.48-bin.jar:rw

  # atlassian-confluence
  atlassian-confluence:
    container_name: Confluence
    environment:
      - ATL_DB_DRIVER=com.mysql.jdbc.Driver
      - ATL_DB_TYPE=mysql
      - ATL_JDBC_PASSWORD={password}
      - ATL_JDBC_URL=jdbc:mysql://localhost:3306/confluencedb?useUnicode=true&autoReconnect=true&useSSL=false
      - ATL_JDBC_USER=atlassian
      - ATL_PROXY_NAME=confluence.yourdomain.com
      - ATL_PROXY_PORT=443
      - ATL_TOMCAT_PORT=8090
      - ATL_TOMCAT_SCHEME=https
      - ATL_TOMCAT_SECURE=true
    depends_on:
      - db
    healthcheck:
      test: 'curl localhost:8090/status | grep -q RUNNING'
      interval: 1m
      retries: 10
      timeout: 10s
    image: 'atlassian/confluence:latest'
    network_mode: bridge
    ports:
      - '8090:8090'
      - '8091:8091'
    restart: unless-stopped
    volumes:
      - confluence:/var/atlassian/application-data/confluence:rw
      - /configuration/mysql-connector-java-8.0.21.jar:/opt/atlassian/confluence/confluence/WEB-INF/lib/mysql-connector-java-8.0.21.jar:rw
      - /confluence/logs:/opt/atlassian/confluence/logs:rw

  # atlassian-jira
  atlassian-jira:
    container_name: Jira
    environment:
      - ATL_DB_DRIVER=org.postgresql.Driver # com.mysql.jdbc.Driver (para MySQL)
      - ATL_DB_TYPE=postgres72 # mysql
      - ATL_DB_SCHEMA_NAME=public
      - ATL_JDBC_PASSWORD={password}
      - ATL_JDBC_SECRET_CLASS=com.atlassian.secrets.store.aws.AwsSecretsManagerStore
      - ATL_JDBC_URL=jdbc:postgresql://localhost:5432/jira #jdbc:mysql://localhost:3306/jiradb?useUnicode=true&autoReconnect=true&useSSL=false
      - ATL_JDBC_USER=atlassian
      - ATL_PROXY_NAME=jira.yourdomain.com
      - ATL_PROXY_PORT=443
      - ATL_TOMCAT_PORT=8080
      - ATL_TOMCAT_SCHEME=https
      - ATL_TOMCAT_SECURE=true
      - ATL_FORCE_CFG_UPDATE=true
      - ATL_DB_KEEPALIVE=true
      - ATL_DB_SOCKETTIMEOUT=300
    depends_on:
      - post
    healthcheck:
      test: 'curl localhost:8080/status | grep -q RUNNING'
      interval: 1m
      retries: 10
      timeout: 10s
    image: 'atlassian/jira-software:latest'
    network_mode: bridge
    ports:
      - '8080:8080'
    restart: unless-stopped
    volumes:
      - jira:/var/atlassian/application-data/jira:rw
      - /configuration/mysql-connector-java-8.0.21.jar:/opt/atlassian/jira/lib/mysql-connector-java-8.0.21.jar:rw
      - /jira/log:/opt/atlassian/jira/logs:rw

  # Panel de Admin FC
  admin:
    build:
      context: angular
      target: builder
    container_name: admin
    ports:
      - 4200:4200
    volumes:
      - admin:/project
      - /project/node_modules

  # AcademyFC
  academy:
    build:
      context: angular
      target: builder
    container_name: academy
    ports:
      - 4200:4200
    volumes:
      - academy:/project
      - /project/node_modules

  # IflucFC
  ifluc:
    build:
      context: ifluc
      target: development
    container_name: ifluc
    ports:
      - 8080:8080
    volumes:
      - ifluc:/project
      - /project/node_modules

  # TxtSuperciasFC
  txtsupercias:
    build:
      context: txtsupercias
      target: development
    container_name: txtsupercias
    ports:
      - 8080:8080
    volumes:
      - txtsupercias:/project
      - /project/node_modules

  # CastorFC
  castor:
    build:
      context: castor
      target: development
    container_name: castor
    ports:
      - 8080:8080
    volumes:
      - castor:/project
      - /project/node_modules

configs:
  gitlab:
    file: ./gitlab.rb
secrets:
  gitlab_root_password:
    file: ./root_password.txt

networks:
  webnet:
    driver: bridge

volumes:
  db_data:
  wp_data:
  sonarqube_data:
  sonarqube_conf:
  sonarqube_extensions:
  sonarqube_bundled-plugins:
  rabbitmq_data:
  postgresql:
  postgresql_data:
  gitlab_config:
  gitlab_logs:
  gitlab_data:
  redmine_data:
  letsencrypt_data:
  grafana_provisioning:
  grafana_data:
  kafka:
  castor:
  txtsupercias:
  ifluc:
  academy:
  admin:
  jira:
  confluence:
  bitbucket:
  prometheus:
  prom_data:
